1)  Ставим brew https://brew.sh (если не macos, смотрим доку)
2)  Ставим mitmproxy: brew install mitmproxy
3)  Смотрим в домашней папке должна появится не пустая папка .mitmproxy.
    Если не появилась, то запускаем сперва скрипт mitm.sh --configure, затем mitmdump и выходим, q > yes
4)  С эмулятора открываем страницу mitm.it - будет инструкция по установке сертификата
    У меня из webview не заработало, делал вручную.
    Закидывыем на эмулятор сертификат: adb push ${HOME}/.mitmproxy/mitmproxy-ca-cert.cer /sdcard
    На эмуляторе через штатное приложение "Files", тапаем на этом файле.
    Система предложит установить пользовательский сертификат, выбираем, vpn/apps.
5)  Включаем прокси на эмуляторе. Делать это нужно в настройках wifi эмулятора, а не android studio.
    Я делаю руками:
    adb shell settings put global http_proxy 10.0.3.2:8080 (есди это genymotion)
    adb shell settings put global http_proxy 10.0.2.2:8080 (есди это android emulator)
    Отключаем прокси через:
    adb shell settings put global http_proxy :0
6)  Запускаем mitmproxy или mitmweb.
    Должно всё работать, при условии, что у вас не самая высокая версия андроида и отключен ssl pinning :-)
7)  Если сертификат неподписанный, то можно добавить опцию --ssl-insecure.
8)  Чтобы использовать моки и добавлять задержки, то запускаем так mitm.sh
    Если каких-то моков нет, то отправляются и возвращаются реальные запросы.
9)  Все настройки лежат в файле mitm.yaml
    map_local.urls - это соответствие запросов и файлов с готовыми моками.
    Файлы с моками должны лежать в корне папки responses.
    Здесь возможно несколько вариантов. Либо в файле лежит готовый мок ответ.
    Либо это json, где могут быть следующие поля: mitm_status, mitm_content, mitm_header.
    Из mitm_status берется HTTP-статус, если его нет в мок-файле. то берется поле из yaml - map_local.status.
    Из mitm_headers берутся хедеры, которые будут добавлены в ответ, иначе поле - map_local.headers
    Из mitm_content - сам ответ.
10) Также можно эмулировать сетевую задержку через поле delay. Это задержка в миллисекундах, перед тем, как
    будет отправлен запрос.
11) В случае изменения mitm.yaml перезапускать mitmproxy не надо, изменения подхватятся автоматически при
    следующем запросе.
12) Питон-скрипт при своей работе выводит отладочную информацию. Увидеть ее можно, если нажать в mimtproxy
    клавишу E (View Event Log)